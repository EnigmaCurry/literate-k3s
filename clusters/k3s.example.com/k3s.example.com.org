#+title: Literate K3s Cluster
#+author: EnigmaCurry
#+OPTIONS: ^:{}
#+EXPORT_FILE_NAME: index.html
#+INCLUDE: "../../meta/export-html.org"
#+INCLUDE: "../../meta/github-ribbon.org"
#+INCLUDE: "../../meta/intro.org"
# Local Variables:
# eval: (progn (load-file "../../meta/org-meta.el"))
# End:

* Core Config
** CLUSTER
Set =CLUSTER= to be the domain name for your cluster:
#+name: CLUSTER
#+begin_src config :noweb yes :eval no
k3s.example.com
#+end_src
** CLUSTER_SSH_USER
Set =CLUSTER_SSH_USER= to be the admin SSH account of the cluster (usually
root).
#+name: CLUSTER_SSH_USER
#+begin_src config :noweb yes :eval no
root
#+end_src
** KUBE_CONFIG
  =KUBE_CONFIG= is the local path to the kubectl config file
  #+name: KUBE_CONFIG
  #+begin_src config :noweb yes :eval no
  ${HOME}/.kube/<<CLUSTER>>-config
  #+end_src
** kubectl command
 Since you'll need to specify the kubectl config file each and every time you use
 =kubectl=, let's create a NoWeb alias for it (=<<kubectl>>=), to use in other
 code blocks.
 #+name: kubectl
 #+begin_src config :noweb yes :eval no
 kubectl --kubeconfig=<<KUBE_CONFIG>>
 #+end_src

* Create directories for namespaces
Create all of the directories necessary for tangling this config:

#+begin_src shell :noweb yes :eval never-export :exports code
mkdir -p <<SRC_DIR>>/kube-system/traefik/
mkdir -p <<SRC_DIR>>/git-system/gitea/
mkdir -p <<SRC_DIR>>/flux-system/
mkdir -p <<SRC_DIR>>/rook-nfs-system/
mkdir -p <<SRC_DIR>>/rook-nfs/
#+end_src

* kube-system
=kube-system= is the namespace for running system wide features, mostly network
related. 
** Traefik Config
*** TRAEFIK_ACME_EMAIL
  =TRAEFIK_ACME_EMAIL= is the email address to register with the ACME service
  provider. 
 #+name: TRAEFIK_ACME_EMAIL
 #+begin_src config :eval no
 you@example.com
 #+end_src
*** TRAEFIK_ACME_SERVER
 =TRAEFIK_ACME_SERVER= is the URL for the Let's Encrypt API (Or other ACME
 provider). 
 #+name: TRAEFIK_ACME_SERVER
 #+begin_src config :eval no
 https://acme-staging-v02.api.letsencrypt.org/directory
 #+end_src

 For production, use the =acme-v02= Lets Encrypt server :

 : https://acme-v02.api.letsencrypt.org/directory

 For staging, use the =acme-staging-v02= Let's Encrypt server :

 : https://acme-staging-v02.api.letsencrypt.org/directory

 The difference, is that the staging server has much more generous [[https://letsencrypt.org/docs/rate-limits/][rate limiting]],
 but will only provide certificates for testing purposes (ie, they appear INVALID
 in web browsers.) You really should start with the staging server for new
 deployments, because you may find you need to recreate the whole server a few
 times, and if you don't backup and restore the =acme.json= file that Traefik
 needs, it will request the certificates be issued again, incurring the wrath of
 the rate limit, which blocks you out for a week.

*** TRAEFIK_WHOAMI_DOMAIN
 [[https://github.com/traefik/whoami][traefik/whoami]] can be deployed to test Traefik functionality. It needs its own
 domain name to respond to. =TRAEFIK_WHOAMI_DOMAIN= is the subdomain that the
 whoami service responds to.
 #+name: TRAEFIK_WHOAMI_DOMAIN
 #+begin_src config :noweb yes :eval no
 whoami.<<CLUSTER>>
 #+end_src
*** TRAEFIK_VERSION
 The version number of Traefik to install (eg. =2.3=).
 #+name: TRAEFIK_VERSION
 #+begin_src config :eval no
 v2.3
 #+end_src
*** TRAEFIK_LOG_LEVEL
 =TRAEFIK_LOG_LEVEL= is the filter level on the traefik log.
 #+name: TRAEFIK_LOG_LEVEL
 #+begin_src config :eval no
 INFO
 #+end_src
** Traefik Deployment
#+INCLUDE: "../../lib/traefik.org"
** Sealed Secrets
#+INCLUDE: "../../lib/sealed_secrets.org"
* git-system
=git-system= is the namespace created for Gitea.
** Gitea Config
*** GITEA_DOMAIN
#+name: GITEA_DOMAIN
#+begin_src config :noweb yes :eval no
git.<<CLUSTER>>
#+end_src
*** GITEA_POSTGRES_PVC_SIZE
The size of the postgres database volume for gitea:
#+name: GITEA_POSTGRES_PVC_SIZE
#+begin_src config :noweb yes :eval no
5Gi
#+end_src
*** GITEA_PVC_SIZE
The size of the data volume for gitea:
#+name: GITEA_PVC_SIZE
#+begin_src config :noweb yes :eval no
5Gi
#+end_src
*** GITEA_USER
=GITEA_USER= is the admin account name to create. Note: =admin= is a reserved
name.
#+name: GITEA_USER
#+begin_src config :noweb yes :eval no
root
#+end_src
*** GITEA_EMAIL
=GITEA_EMAIL= is the admin account email address:
#+name: GITEA_EMAIL
#+begin_src config :noweb yes :eval no
root@example.com
#+end_src
** Gitea Deployment
#+INCLUDE: "../../lib/gitea.org"
* flux-system
** Flux Config
*** FLUX_REPO_NAME
The name of the repository containing these org files, and from which flux
reads. Not including the domain, just the name.
#+name: FLUX_REPO_NAME
#+begin_src config :noweb yes :eval no
music.enigmacurry.com
#+end_src
*** FLUX_GIT_REMOTE
 #+name: FLUX_GIT_REMOTE
 #+begin_src config :noweb yes :eval no
 ssh://git@github.com:EnigmaCurry/music.enigmacurry.com.git
 #+end_src
** Flux Deployment
#+INCLUDE: "../../lib/flux.org"
* LICENSE
#+INCLUDE: "../../LICENSE.org"
* COMMENT Emacs Local Variables
This section contains the =Local Variables= that [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][Emacs reads when it loads this
file]]. This section must be located "no more than 3000 characters from the end of
the file", so you need to keep this as the very last section of this document.
This section is excluded from the HTML output because it is tagged with
=COMMENT=. 

# Local Variables:
# eval: (progn (load-file "../../meta/org-meta.el") (literate-k3s-init))
# End:

