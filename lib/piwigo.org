[[https://piwigo.org/][Piwigo]] is a mature, open source, PHP based, image web gallery, supporting public
and private galleries, user registration, comments, notifications, slideshows,
bootstrap theme for wide device compatibility, and also there's native mobile
apps available. The images will be stored primarily on a pod-local volume, and
additionally a sidecar deployment of [[https://restic.net/][Restic]] will regularly backup the volume to
remote S3 storage. The database is stored in MariaDB, and additional sidecars
are created to regularly backup the database to S3 with Restic.

Assuming you have already installed Flux, and you have tangled your Org source,
and committed, and pushed to the git repository, piwigo should now already be
running. To get started, you just need to sign in, and configure the database
credentials.

* Get database credentials
You need the database password in order to fill in the config form (In order to
see the password, you must un-comment the following =echo= line (remove =#=)
before running it, remember to clear the RESULTS before saving this file
again: =C-c C-v k=):

#+begin_src shell :noweb yes :eval never-export :exports code
MARIADB_PASSWORD=$(<<kubectl>> -n piwigo get secret/mariadb \
  -o jsonpath='{.data.mariadb-password}' | base64 -d)
#echo "Piwigo MariaDB password is: ${MARIADB_PASSWORD}"
#+end_src

Now you can go to the =PIWIGO_DOMAIN= in your browser and configure the
database:

  * host: =mariadb=
  * username: =piwigo=
  * password: (see above output)
  * database name: =piwigo=
  * admin username and password: make your own up  

* Piwigo attached MariaDB service
#+BEGIN_COMMENT
I /would like/ to just be able to INCLUDE a MariaDB template for Piwigo. But I
haven't figured out a way to "instance" an Org-mode INCLUDE statement to use it
more than once, like a true template. So for now you can just copy this section
into your new projects that depend on MariaDB, and be careful to translate all
of the PIWIGO specific references in variable names and paths, in your own
name-spaced application.
#+END_COMMENT
** piwigo/mariadb/backups.pvc.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/mariadb/backups.pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-backups
  namespace: piwigo
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: <<PIWIGO_MARIADB_BACKUP_PVC_SIZE>>
  storageClassName: local-path
#+end_src
** piwigo/mariadb/helm.release.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/mariadb/helm.release.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mariadb
  namespace: piwigo
spec:
  chart:
    spec:
      chart: mariadb
      version: <<PIWIGO_MARIADB_HELM_CHART_VERSION>>
      sourceRef:
        kind: HelmRepository
        name: bitnami
  interval: 5m0s
  values:
    auth:
      username: <<PIWIGO_MARIADB_DATABASE_USER>>
      database: <<PIWIGO_MARIADB_DATABASE_NAME>>
      existingSecret: mariadb
    primary:
      persistence:
        size: <<PIWIGO_MARIADB_PVC_SIZE>>
      extraVolumes:
      - name: mariadb-backups
        persistentVolumeClaim:
          claimName: mariadb-backups
      sidecars:
      - name: mariadb-backups
        image: woolfg/mysql-backup-sidecar:v0.3.1-mariadb-10.4
        env:
        - name: CRON_SCHEDULE
          value: "30 2 * * *"
        - name: BACKUP_DIR
          value: /backup
        - name: INCREMENTAL
          value: "true"
        - name: MYSQL_HOST
          value: localhost
        - name: MYSQL_USER
          value: root
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb
              key: mariadb-root-password
        volumeMounts:
        - name: mariadb
          mountPath: /var/lib/mysql
        - name: mariadb-backups
          mountPath: /backup
      - name: mariadb-s3-upload
        image: lobaro/restic-backup-docker:1.3.1-0.9.6
        env:
        - name: RESTIC_REPOSITORY
          value: <<PIWIGO_MARIADB_BACKUP_REPOSITORY>>
        - name: RESTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: piwigo
              key: RESTIC_PASSWORD
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mariadb-backups
              key: S3_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mariadb-backups
              key: S3_SECRET_ACCESS_KEY
        volumeMounts:
        - name: mariadb-backups
          mountPath: /data
#+end_src

* Backup Piwigo config+photos to S3
You probably consider your photos important, so you should make a backup to an
external storage bucket. You will put your S3 credentials into a sealed secret.

Since you're dealing with a secret, you should copy these commands into a fresh
terminal, and edit them directly in the shell (not edited nor run from Org).
Secrets will be encrypted into a Sealed Secret. In your fresh terminal, ensure
=bracketed-paste= is on, which prevents commands from running automatically when
you paste them in your terminal:

#+begin_src shell :noweb yes :eval never :exports code
# Run this in a new terminal:
set enable-bracketed-paste on
#+end_src

Copy and paste this next code into the same terminal as above. Before pressing
Enter, press =Ctrl-A= to go back to beginning of the first line, or scroll with
the left/right arrow keys (NOT the up/down arrow keys), and edit the variables
before pressing Enter:

#+begin_src shell :noweb yes :eval never :exports code
S3_ACCESS_KEY_ID=xxxxxxxxx
S3_SECRET_ACCESS_KEY=xxxxxxxx
SRC_DIR=${HOME}/git/clusters/barrel.rymcg.tech/
kubectl create secret generic piwigo-s3-backup \
   --namespace piwigo --dry-run=client -o json \
   --from-literal=S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID} \
   --from-literal=S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY} \
   | kubeseal -o yaml > \
  ${SRC_DIR}/piwigo/piwigo-s3-backup.sealed_secret.yaml
#+end_src

The backup is regularly scheduled, but you can trigger the initial backup to
occur immediately:

#+begin_src shell :noweb yes :eval never-export :exports code
<<kubectl>> -n piwigo \
    exec piwigo-0 --container piwigo-s3-backup -t -- \
    /bin/backup
#+end_src

* piwigo/kustomization.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- namespace.yaml
- config.pvc.yaml
- statefulset.yaml
- service.yaml
- piwigo-s3-backup.sealed_secret.yaml
- helm.sources.yaml
- mariadb/backups.pvc.yaml
- mariadb/helm.release.yaml
#+end_src
* piwigo/namespace.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: piwigo
#+end_src
* piwigo/pvc.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/config.pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: piwigo-data
  namespace: piwigo
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: <<PIWIGO_PVC_SIZE>>
  storageClassName: local-path
#+end_src
* piwigo/statefulset.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/statefulset.yaml
  apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: piwigo
    namespace: piwigo
    labels:
      app: piwigo
  spec:
    serviceName: piwigo
    selector:
      matchLabels:
        app: piwigo
    template:
      metadata:
        labels:
          app: piwigo
      spec:
        containers:
        - name: piwigo
          image: ghcr.io/linuxserver/piwigo
          ports:
          - containerPort: 80
          env:
          - name: PUID
            value: "1000"
          - name: PGID
            value: "1000"
          - name: TZ
            value: "Etc/UTC"
          volumeMounts:
          - name: data
            mountPath: /config
        - name: piwigo-s3-backup
          image: lobaro/restic-backup-docker:1.2-0.9.4
          env:
          - name: RESTIC_REPOSITORY
            valueFrom:
              secretKeyRef:
                name: piwigo-s3-backup
                key: RESTIC_REPOSITORY
          # Restic /requires/ encryption, but I don't need it, and I worry more
          # about forgetting the password than anything else. Data is protected by
          # S3 credentials not encryption. The hard coded `password` here is cool:
          - name: RESTIC_PASSWORD
            value: password
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: piwigo-s3-backup
                key: S3_ACCESS_KEY_ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: piwigo-s3-backup
                key: S3_SECRET_ACCESS_KEY
          volumeMounts:
            - name: data
              mountPath: /data
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: piwigo-data
#+end_src

* piwigo/service.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: piwigo
  namespace: piwigo
spec:
  ports:
  - name: web
    port: 80
    protocol: TCP
  selector:
    app: piwigo
---
apiVersion: traefik.containo.us/v1alpha1
kind: TraefikService
metadata:
  name: piwigo
  namespace: piwigo
spec:
  weighted:
    services:
      - name: piwigo
        weight: 1
        port: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: piwigo
  namespace: piwigo
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`<<PIWIGO_DOMAIN>>`)
    services:
    - name: piwigo
      port: 80
  tls:
    certResolver: default
#+end_src
* piwigo/helm.sources.yaml
#+begin_src yaml :noweb yes :eval no :tangle piwigo/helm.sources.yaml
---
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: bitnami
  namespace: piwigo
spec:
  interval: 12h0m0s
  url: https://charts.bitnami.com/bitnami
#+end_src
